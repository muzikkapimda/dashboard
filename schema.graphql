# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Admin {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AdminWhereUniqueInput {
  id: ID
  email: String
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AdminOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AdminUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input AdminUpdateArgs {
  where: AdminWhereUniqueInput!
  data: AdminUpdateInput!
}

input AdminCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Member {
  id: ID!
  fullName: String
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input MemberWhereUniqueInput {
  id: ID
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  fullName: StringFilter
  payments: PaymentManyRelationFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
}

input MemberUpdateInput {
  fullName: String
  payments: PaymentRelateToManyForUpdateInput
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  fullName: String
  payments: PaymentRelateToManyForCreateInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Category {
  id: ID!
  title: String
  description: String
  seoTitle: String
  seoDescription: String
  image: ImageFieldOutput
  selectTitle: String
  selectDescription: String
  content: Category_content_Document
  parentCats: Category
  subCats: Category
  options(where: CategoryOptionWhereInput! = {}, orderBy: [CategoryOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryOptionWhereUniqueInput): [CategoryOption!]
  optionsCount(where: CategoryOptionWhereInput! = {}): Int
  createdAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type Category_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  selectTitle: StringFilter
  selectDescription: StringFilter
  parentCats: CategoryWhereInput
  subCats: CategoryWhereInput
  options: CategoryOptionManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CategoryOptionManyRelationFilter {
  every: CategoryOptionWhereInput
  some: CategoryOptionWhereInput
  none: CategoryOptionWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  selectTitle: OrderDirection
  selectDescription: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  title: String
  description: String
  seoTitle: String
  seoDescription: String
  image: ImageFieldInput
  selectTitle: String
  selectDescription: String
  content: JSON
  parentCats: CategoryRelateToOneForUpdateInput
  subCats: CategoryRelateToOneForUpdateInput
  options: CategoryOptionRelateToManyForUpdateInput
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input CategoryOptionRelateToManyForUpdateInput {
  disconnect: [CategoryOptionWhereUniqueInput!]
  set: [CategoryOptionWhereUniqueInput!]
  create: [CategoryOptionCreateInput!]
  connect: [CategoryOptionWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  description: String
  seoTitle: String
  seoDescription: String
  image: ImageFieldInput
  selectTitle: String
  selectDescription: String
  content: JSON
  parentCats: CategoryRelateToOneForCreateInput
  subCats: CategoryRelateToOneForCreateInput
  options: CategoryOptionRelateToManyForCreateInput
  createdAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryOptionRelateToManyForCreateInput {
  create: [CategoryOptionCreateInput!]
  connect: [CategoryOptionWhereUniqueInput!]
}

type CategoryOption {
  id: ID!
  title: String
  description: String
  parentOption: CategoryOption
  subOptions(where: CategoryOptionWhereInput! = {}, orderBy: [CategoryOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryOptionWhereUniqueInput): [CategoryOption!]
  subOptionsCount(where: CategoryOptionWhereInput! = {}): Int
  categori: Category
  createdAt: DateTime
}

input CategoryOptionWhereUniqueInput {
  id: ID
}

input CategoryOptionWhereInput {
  AND: [CategoryOptionWhereInput!]
  OR: [CategoryOptionWhereInput!]
  NOT: [CategoryOptionWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  parentOption: CategoryOptionWhereInput
  subOptions: CategoryOptionManyRelationFilter
  categori: CategoryWhereInput
  createdAt: DateTimeNullableFilter
}

input CategoryOptionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input CategoryOptionUpdateInput {
  title: String
  description: String
  parentOption: CategoryOptionRelateToOneForUpdateInput
  subOptions: CategoryOptionRelateToManyForUpdateInput
  categori: CategoryRelateToOneForUpdateInput
  createdAt: DateTime
}

input CategoryOptionRelateToOneForUpdateInput {
  create: CategoryOptionCreateInput
  connect: CategoryOptionWhereUniqueInput
  disconnect: Boolean
}

input CategoryOptionUpdateArgs {
  where: CategoryOptionWhereUniqueInput!
  data: CategoryOptionUpdateInput!
}

input CategoryOptionCreateInput {
  title: String
  description: String
  parentOption: CategoryOptionRelateToOneForCreateInput
  subOptions: CategoryOptionRelateToManyForCreateInput
  categori: CategoryRelateToOneForCreateInput
  createdAt: DateTime
}

input CategoryOptionRelateToOneForCreateInput {
  create: CategoryOptionCreateInput
  connect: CategoryOptionWhereUniqueInput
}

type PageLayout {
  id: ID!
  name: String
  isAvailable: Boolean
  components(where: PageCompontentWhereInput! = {}, orderBy: [PageCompontentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageCompontentWhereUniqueInput): [PageCompontent!]
  componentsCount(where: PageCompontentWhereInput! = {}): Int
}

input PageLayoutWhereUniqueInput {
  id: ID
}

input PageLayoutWhereInput {
  AND: [PageLayoutWhereInput!]
  OR: [PageLayoutWhereInput!]
  NOT: [PageLayoutWhereInput!]
  id: IDFilter
  name: StringFilter
  isAvailable: BooleanFilter
  components: PageCompontentManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PageCompontentManyRelationFilter {
  every: PageCompontentWhereInput
  some: PageCompontentWhereInput
  none: PageCompontentWhereInput
}

input PageLayoutOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAvailable: OrderDirection
}

input PageLayoutUpdateInput {
  name: String
  isAvailable: Boolean
  components: PageCompontentRelateToManyForUpdateInput
}

input PageCompontentRelateToManyForUpdateInput {
  disconnect: [PageCompontentWhereUniqueInput!]
  set: [PageCompontentWhereUniqueInput!]
  create: [PageCompontentCreateInput!]
  connect: [PageCompontentWhereUniqueInput!]
}

input PageLayoutUpdateArgs {
  where: PageLayoutWhereUniqueInput!
  data: PageLayoutUpdateInput!
}

input PageLayoutCreateInput {
  name: String
  isAvailable: Boolean
  components: PageCompontentRelateToManyForCreateInput
}

input PageCompontentRelateToManyForCreateInput {
  create: [PageCompontentCreateInput!]
  connect: [PageCompontentWhereUniqueInput!]
}

type PageCompontent {
  id: ID!
  name: String
  isAvailable: Boolean
  layout: PageLayout
}

input PageCompontentWhereUniqueInput {
  id: ID
}

input PageCompontentWhereInput {
  AND: [PageCompontentWhereInput!]
  OR: [PageCompontentWhereInput!]
  NOT: [PageCompontentWhereInput!]
  id: IDFilter
  name: StringFilter
  isAvailable: BooleanFilter
  layout: PageLayoutWhereInput
}

input PageCompontentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAvailable: OrderDirection
}

input PageCompontentUpdateInput {
  name: String
  isAvailable: Boolean
  layout: PageLayoutRelateToOneForUpdateInput
}

input PageLayoutRelateToOneForUpdateInput {
  create: PageLayoutCreateInput
  connect: PageLayoutWhereUniqueInput
  disconnect: Boolean
}

input PageCompontentUpdateArgs {
  where: PageCompontentWhereUniqueInput!
  data: PageCompontentUpdateInput!
}

input PageCompontentCreateInput {
  name: String
  isAvailable: Boolean
  layout: PageLayoutRelateToOneForCreateInput
}

input PageLayoutRelateToOneForCreateInput {
  create: PageLayoutCreateInput
  connect: PageLayoutWhereUniqueInput
}

type Payment {
  id: ID!
  amount: Decimal
  method: PaymentMethodType
  member: Member
  createdAt: DateTime
}

scalar Decimal

enum PaymentMethodType {
  paytr
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  method: PaymentMethodTypeNullableFilter
  member: MemberWhereInput
  createdAt: DateTimeNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input PaymentMethodTypeNullableFilter {
  equals: PaymentMethodType
  in: [PaymentMethodType!]
  notIn: [PaymentMethodType!]
  not: PaymentMethodTypeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  method: OrderDirection
  createdAt: OrderDirection
}

input PaymentUpdateInput {
  amount: Decimal
  method: PaymentMethodType
  member: MemberRelateToOneForUpdateInput
  createdAt: DateTime
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Decimal
  method: PaymentMethodType
  member: MemberRelateToOneForCreateInput
  createdAt: DateTime
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin
  createAdmins(data: [AdminCreateInput!]!): [Admin]
  updateAdmin(where: AdminWhereUniqueInput!, data: AdminUpdateInput!): Admin
  updateAdmins(data: [AdminUpdateArgs!]!): [Admin]
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteAdmins(where: [AdminWhereUniqueInput!]!): [Admin]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCategoryOption(data: CategoryOptionCreateInput!): CategoryOption
  createCategoryOptions(data: [CategoryOptionCreateInput!]!): [CategoryOption]
  updateCategoryOption(where: CategoryOptionWhereUniqueInput!, data: CategoryOptionUpdateInput!): CategoryOption
  updateCategoryOptions(data: [CategoryOptionUpdateArgs!]!): [CategoryOption]
  deleteCategoryOption(where: CategoryOptionWhereUniqueInput!): CategoryOption
  deleteCategoryOptions(where: [CategoryOptionWhereUniqueInput!]!): [CategoryOption]
  createPageLayout(data: PageLayoutCreateInput!): PageLayout
  createPageLayouts(data: [PageLayoutCreateInput!]!): [PageLayout]
  updatePageLayout(where: PageLayoutWhereUniqueInput!, data: PageLayoutUpdateInput!): PageLayout
  updatePageLayouts(data: [PageLayoutUpdateArgs!]!): [PageLayout]
  deletePageLayout(where: PageLayoutWhereUniqueInput!): PageLayout
  deletePageLayouts(where: [PageLayoutWhereUniqueInput!]!): [PageLayout]
  createPageCompontent(data: PageCompontentCreateInput!): PageCompontent
  createPageCompontents(data: [PageCompontentCreateInput!]!): [PageCompontent]
  updatePageCompontent(where: PageCompontentWhereUniqueInput!, data: PageCompontentUpdateInput!): PageCompontent
  updatePageCompontents(data: [PageCompontentUpdateArgs!]!): [PageCompontent]
  deletePageCompontent(where: PageCompontentWhereUniqueInput!): PageCompontent
  deletePageCompontents(where: [PageCompontentWhereUniqueInput!]!): [PageCompontent]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  endSession: Boolean!
  authenticateAdminWithPassword(email: String!, password: String!): AdminAuthenticationWithPasswordResult
  createInitialAdmin(data: CreateInitialAdminInput!): AdminAuthenticationWithPasswordSuccess!
}

union AdminAuthenticationWithPasswordResult = AdminAuthenticationWithPasswordSuccess | AdminAuthenticationWithPasswordFailure

type AdminAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Admin!
}

type AdminAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialAdminInput {
  name: String
  email: String
  password: String
}

type Query {
  admins(where: AdminWhereInput! = {}, orderBy: [AdminOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdminWhereUniqueInput): [Admin!]
  admin(where: AdminWhereUniqueInput!): Admin
  adminsCount(where: AdminWhereInput! = {}): Int
  members(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  categoryOptions(where: CategoryOptionWhereInput! = {}, orderBy: [CategoryOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryOptionWhereUniqueInput): [CategoryOption!]
  categoryOption(where: CategoryOptionWhereUniqueInput!): CategoryOption
  categoryOptionsCount(where: CategoryOptionWhereInput! = {}): Int
  pageLayouts(where: PageLayoutWhereInput! = {}, orderBy: [PageLayoutOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageLayoutWhereUniqueInput): [PageLayout!]
  pageLayout(where: PageLayoutWhereUniqueInput!): PageLayout
  pageLayoutsCount(where: PageLayoutWhereInput! = {}): Int
  pageCompontents(where: PageCompontentWhereInput! = {}, orderBy: [PageCompontentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageCompontentWhereUniqueInput): [PageCompontent!]
  pageCompontent(where: PageCompontentWhereUniqueInput!): PageCompontent
  pageCompontentsCount(where: PageCompontentWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Admin

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
