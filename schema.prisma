// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id        String    @id @default(uuid()) @postgresql.Uuid
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  createdAt DateTime? @default(now())
}

model Member {
  id       String    @id @default(uuid()) @postgresql.Uuid
  fullName String    @default("")
  payments Payment[] @relation("Payment_member")
}

model Category {
  id                String           @id @default(uuid()) @postgresql.Uuid
  title             String           @default("")
  description       String           @default("")
  seoTitle          String           @default("")
  seoDescription    String           @default("")
  image_filesize    Int?
  image_extension   String?
  image_width       Int?
  image_height      Int?
  image_id          String?
  selectTitle       String           @default("")
  selectDescription String           @default("")
  content           Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  parentCats        Category?        @relation("Category_parentCats", fields: [parentCatsId], references: [id])
  parentCatsId      String?          @unique @map("parentCats") @postgresql.Uuid
  subCats           Category?        @relation("Category_parentCats")
  options           CategoryOption[] @relation("CategoryOption_categori")
  createdAt         DateTime?        @default(now())
}

model CategoryOption {
  id             String           @id @default(uuid()) @postgresql.Uuid
  title          String           @default("")
  description    String           @default("")
  parentOption   CategoryOption?  @relation("CategoryOption_parentOption", fields: [parentOptionId], references: [id])
  parentOptionId String?          @map("parentOption") @postgresql.Uuid
  subOptions     CategoryOption[] @relation("CategoryOption_parentOption")
  categori       Category?        @relation("CategoryOption_categori", fields: [categoriId], references: [id])
  categoriId     String?          @map("categori") @postgresql.Uuid
  createdAt      DateTime?        @default(now())

  @@index([parentOptionId])
  @@index([categoriId])
}

model PageLayout {
  id          String           @id @default(uuid()) @postgresql.Uuid
  name        String           @default("")
  isAvailable Boolean          @default(true) @map("is_active")
  components  PageCompontent[] @relation("PageCompontent_layout")
}

model PageCompontent {
  id          String      @id @default(uuid()) @postgresql.Uuid
  name        String      @default("")
  isAvailable Boolean     @default(true) @map("is_active")
  layout      PageLayout? @relation("PageCompontent_layout", fields: [layoutId], references: [id])
  layoutId    String?     @map("layout") @postgresql.Uuid

  @@index([layoutId])
}

model Payment {
  id        String            @id @default(uuid()) @postgresql.Uuid
  amount    Decimal?          @postgresql.Decimal(18, 4)
  method    PaymentMethodType @default(paytr)
  member    Member?           @relation("Payment_member", fields: [memberId], references: [id])
  memberId  String?           @map("member") @postgresql.Uuid
  createdAt DateTime?         @default(now())

  @@index([memberId])
}

enum PaymentMethodType {
  paytr
}
